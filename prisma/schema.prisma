//npx prisma migrate dev --name init
//npx prisma generate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  role      String  // Role as a String
  doctor    Doctor? @relation
  patient   Patient?
  nurse     Nurse?
  contact   Contact? 
  emergencyAdmissions EmergencyAdmission[]
}

// Doctor model
model Doctor {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  specialty   String
  experience  Int 
  user        User        @relation(fields: [userId], references: [id])
  appointments Appointment[]
}

// Patient model
model Patient {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  user        User        @relation(fields: [userId], references: [id])
  age         Int
  gender      String
  appointments Appointment[]
  emergencyAdmissions EmergencyAdmission[] 
}

// Nurse model
model Nurse {
  id          Int         @id @default(autoincrement())
  userId      Int         @unique
  department  String
  shift       String 
  user        User        @relation(fields: [userId], references: [id])
}

// Appointment model
model Appointment {
  id          Int      @id @default(autoincrement())
  date        DateTime
  doctorId    Int
  patientId   Int
  scheduleId  Int
  slotId      Int
  disease     String
  status      String   @default("booked")
  remarks     String?
  doctor      Doctor   @relation(fields: [doctorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

//Slot
model DoctorScheduleSlot {
  id           Int      @id @default(autoincrement())
  startTime    String
  endTime      String
  maxPatients  Int      @default(25)
  available    Boolean  @default(true)

  createdAt    DateTime @default(now())
}

//doctor schedule
model DoctorSchedule {
  id           Int       @id @default(autoincrement())
  doctorId     Int
  date         DateTime        
  visitFee     Int
  branch       String?
  floorNumber  String
  roomNumber   String
  location     String
  remarks      String?
  status       String    @default("active")
  @@unique([doctorId, date])
}

//user contacts
model Contact {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  phone       String
  email       String?
  house       String?
  village     String?
  postOffice  String?
  city        String?
  division    String?
  country     String?
  user        User   @relation(fields: [userId], references: [id])
}

// Bed Model
model Bed {
  id           Int                  @id @default(autoincrement())
  department   String
  roomNumber   String
  bedNumber    String
  available    Boolean              @default(true)
  emergencyAdmissions EmergencyAdmission[]
  createdAt    DateTime             @default(now())
}

// Emergency Admission Model
model EmergencyAdmission {
  id              Int       @id @default(autoincrement())
  patientId       Int?
  name            String    
  age             Int?
  gender          String?
  admittedById    Int?       
  condition       String    
  department      String    
  bedId           Int?
  admissionTime   DateTime   @default(now())
  status          String     @default("admitted") 
  remarks         String?

  patient         Patient?  @relation(fields: [patientId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  admittedBy      User?     @relation(fields: [admittedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  bed             Bed?      @relation(fields: [bedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}